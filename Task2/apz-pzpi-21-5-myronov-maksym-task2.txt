1 МОДЕЛЮВАННЯ ПРОГРАМНОЇ СИСТЕМИ
У системи є два види користувачів: адміністратори та робітники.
Окремим користувачем можна вважати пристрій. Адміністратори мають
широкий спектр можливостей. Вони відповідальні за адміністрування
системою, включаючи додавання нових користувачів, та переконані в
правильності роботи системи. До задач адмінстраторів також відноситься
додавання локацій для подальшого використання для відмітки місця
знаходження відповідної посилки, які адміністратор потім може
переглянути, з відповідними речами з посилки, які будуть завантажені
робітниками.
Робітники мають доступ до веб та мобільного застосунку. Вони
мають можливість генерування опису завантаженого зображення
відповідної речі за допомогою Google Vision API, відмітки її статусу
продажу та подальшої взаємодії. Також до їх задач відноситься трекінг
посилки, відмітки знаходження та відповідного статусу посилки.
Користувач має можливість підключити розумний пристрій до системи,
данні з якого записуються в базу данних. Також отримання данних про
подальше транспортування в контейнері входить до можливостей
робітників.
Мобільний застосунок призначений для робітників задля прискореної
взаємодії з менеджментом посилок, включаючи її відправку, пересилку,
прийняття.
Робітники за допомогою реалізованого програманого коду на
розумному пристрої можути вираховувати оптиміальну варіацію
запаковування посилок для подальшого транспортування. Для загального
розуміння системи була створена діаграма прецедентів (Додаток А).
2 ТЕХНОЛОГІЇ ТА АРХІТЕКТУРНІ РІШЕННЯ
Розуміючи, що у сучасній веб-розробці важливо вибрати правильні
технології та архітектурні рішення, щоб забезпечити масштабованість,
безпеку та ефективність. Для реалізації веб-додатку я обрав Spring Boot 3 з
використанням Spring Security, Spring Data JPA, PostgreSQL, Liquibase і
REST API.
Spring Boot 3 є ядром моєї програми, що забезпечує швидкий і
надійний запуск і налаштування проекту. Для забезпечення безпеки
програми використовувася Spring Security. Автентифікація та авторизація
реалізована за допомогою JWT (JSON Web Tokens), вони дозволяють
керувати ролями та правами доступу для різних типів користувачів.
Взаємодія з базою даних відбувається за допомогою Spring Data JPA, що
пропонує просту роботу з базами даних через репозиторії. Для зберігання
даних використовувався PostgreSQL, що виділяється своює надійністю. Для
контролю версій бази даних був обраний Liquibase, що пропонує
автоматичне оновлення схем баз данних під час розгортання та зберігання
історії змін для їх відстеження.
Веб-додаток забезпечує функціональність через REST API. HTTP
запити викорустовуються для взаємодії з мобільним застосунком та IoT
пристроєм (див. Додаток Б). Щодо архітекткрного патерну бува обраний
MVC (див. Додаток В), який дозволяє чіткий розподіл логіки програми між
моделлю, контролером і представленням, просте тестування та підтримки
завдяки модульності та забезпечення масштабованості програми за рахунок
чіткої структуризації компонентів. Математичні методи були використані
при обробрці данних, які надсилає Google Vision API.
3 БІЗНЕС ЛОГІКА
Програмна система пропонує широкий функіонал, осоновна задача
якого в автоматизації процесу доставки секонд хенд речей, насамперед
через переведення усього процесу від відправлення до продажу речей в
одну електрону систему. Використання Google Vision API, смарт девайсу є
невід’ємною частиною усього процесу.
Основний функціонал включає:
⎯ Функціонал авторизації з використанням JWT токенів. У пакеті
config програмної системи можна знайти відповідну реалізацію;
⎯ Функціонал додавання нової локації адміном;
⎯ Функціонал управління локаціями, так, наприклад, видалення
та редагування, адміном;
⎯ Функціонал отримання відповідної речі за допомогою Google
Vision API робітником;
⎯ Функціонал управління речами, так, наприклад, видалення,
робітником;
⎯ Функціонал управління речами, так, наприклад, редагування,
робітником;
⎯ Функціонал перегляду усіх завантажених речей адміном та
робітником;
⎯ Функціонал оновлення статусу продажу речі робітником;
⎯ Функціонал створення нової посилки адміном;
⎯ Функціонал редагування данних про стан та статус посилки
робітником;
⎯ Функціонал підключення IoT пристрою для відстеження
габаритів та стану посилок робітником;
Розробка велася з дотриманням принципів Clean Code, стандартного
форматування, конвенцій Spring та з акцентом на безпеку.
4 ПРОЄКТУВАННЯ БАЗИ ДАНИХ
Була розроблена схема бази даних, з якої можна побачити відповідні
зв'язки між таблицями та їхню відповідну структуру (Див. Додаток Г)
⎯ User і Package: Між цими таблицями існує зв'язок "багато до
одного" (Many-to-One). Користувач може бути пов'язаний з одним пакетом
через поле package_id. Можливість адмінів створювати блок пости та
встановлювати на них розумні пристрої, які будуть сканувати машини
постачання.
⎯ Item і Package: Між цими таблицями також існує зв'язок "багато
до одного" (Many-to-One). Кожен предмет пов'язаний з одним пакетом через
поле package_id.
⎯ Package і Location: Між цими таблицями існує зв'язок "багато до
одного" (Many-to-One). Кожен пакет пов'язаний з однією локацією через
поле location_id.
5 СПЕЦИФІКАЦІЯ REST
REST API включає 14 ендпоінтів. Опис призначення кожного
ендпоінту наведена у таблиці (див. таб. 1)
Таблиця 1 – Специфікація REST API
Рівень
доступу
Ендпоінт HTTP метод Призначення
Адміністратор /api/users/register POST Реєстрація користувача
Всі /api/users/login POST Авторизація користувача
Адміністратор /api/package-manager POST Додавання нової посилки
Працівник /api/packagemanager/{packageId}/
setStatus
PUT Оновлення статусу посилки
Працівник,
адміністратор
/api/package-manager GET Отримання всіх посилок
Адміністратор /api/packagemanager/{packageId}
DELETE Видалення посилки
Адміністратор /api/locationmanager/setLocation
POST Додавання локації
Адміністратор /api/location-manager PUT Оновлення локації
Адміністратор /api/location-manager GET Отримання всіх локацій
Адміністратор /api/locationmanager/{locationId}
DELETE Видалення локації
Працівник /api/itemmanager/{packageId}/
setItem
POST Додавання нової речі
Працівник,
адміністратор
/api/itemmanager/getItems
GET Отримання всіх речей
Працівник /api/item-manager
/{itemId}/setSold
PUT Оновлення статусу
продажу речі
Адміністратор /api/iotservice/package
POST Отримання данних з IoT
10
ВИСНОВКИ
В рамках лабораторної роботи було здобуто практичні навички з
проектування серверної частини програмної системи, відтворення діаграм
розгортання та пакетів, візуалізація архітектури системи та її компонентів,
проектування бази даних, розробки програмної реалізації серверної
частини. Цей досвід сприяв набуттям практичних знань та навичок,
необхідних для розробки складних програмних систем
